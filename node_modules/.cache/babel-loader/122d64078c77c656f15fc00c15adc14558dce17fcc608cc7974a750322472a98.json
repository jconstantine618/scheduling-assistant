{"ast":null,"code":"var _jsxFileName = \"/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js\",\n  _s = $RefreshSig$();\n// src/SchedulerApp.js\nimport React, { useState, forwardRef, useImperativeHandle, useMemo, useEffect } from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\nconst timeToMinutes = time => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n  const schedule = new Map();\n  employees.forEach(emp => schedule.set(emp.name, new Map()));\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n  const dateStr = date.toISOString().split('T')[0];\n\n  // Step 1: Initialize schedule with OFF, PTO, and Lunch\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n    if (hasPTO) {\n      TIME_SLOTS.forEach(slot => dailyTasks.set(slot, 'PTO'));\n      return; // Skip to next employee if they have PTO\n    }\n    const shiftStartMinutes = timeToMinutes(emp.shift.start);\n    const shiftEndMinutes = timeToMinutes(emp.shift.end);\n    const lunchStartMinutes = timeToMinutes(emp.lunch.start);\n    const lunchEndMinutes = timeToMinutes(emp.lunch.end);\n    TIME_SLOTS.forEach(slot => {\n      const slotMinutes = timeToMinutes(slot);\n      if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n        if (emp.lunch.start && slotMinutes >= lunchStartMinutes && slotMinutes < lunchEndMinutes) {\n          dailyTasks.set(slot, 'Lunch');\n        } else {\n          dailyTasks.set(slot, 'Available');\n        }\n      } else {\n        dailyTasks.set(slot, 'OFF');\n      }\n    });\n  });\n\n  // Step 2: Fill mandatory coverage slots\n  TIME_SLOTS.forEach(slot => {\n    const slotMinutes = timeToMinutes(slot);\n    if (slotMinutes < 480 || slotMinutes >= 1020) return;\n    let dispatchCount = 0;\n    let reservationsCount = 0;\n    const availableEmployees = employees.filter(emp => {\n      var _schedule$get;\n      return ((_schedule$get = schedule.get(emp.name)) === null || _schedule$get === void 0 ? void 0 : _schedule$get.get(slot)) === 'Available';\n    });\n    for (const emp of availableEmployees) {\n      if (dispatchCount < 1 && emp.abilities.includes('Dispatch')) {\n        schedule.get(emp.name).set(slot, 'Dispatch');\n        dispatchCount++;\n      }\n    }\n    for (const emp of availableEmployees) {\n      var _schedule$get2;\n      if (((_schedule$get2 = schedule.get(emp.name)) === null || _schedule$get2 === void 0 ? void 0 : _schedule$get2.get(slot)) === 'Available') {\n        if (reservationsCount < 3 && emp.abilities.includes('Reservations')) {\n          schedule.get(emp.name).set(slot, 'Reservations');\n          reservationsCount++;\n        }\n      }\n    }\n  });\n\n  // Step 3: Fill remaining slots with specialist tasks\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    TIME_SLOTS.forEach(slot => {\n      if (dailyTasks.get(slot) === 'Available') {\n        dailyTasks.set(slot, emp.specialistTask);\n      }\n    });\n  });\n  return schedule;\n}\n\n// --- UI Components ---\nconst EmployeeRow = ({\n  emp,\n  dailySchedule\n}) => {\n  const cells = [];\n  let i = 0;\n  while (i < TIME_SLOTS.length) {\n    var _dailySchedule$get;\n    const currentTask = ((_dailySchedule$get = dailySchedule.get(emp.name)) === null || _dailySchedule$get === void 0 ? void 0 : _dailySchedule$get.get(TIME_SLOTS[i])) || 'OFF';\n    let colspan = 1;\n    while (i + colspan < TIME_SLOTS.length && (((_dailySchedule$get2 = dailySchedule.get(emp.name)) === null || _dailySchedule$get2 === void 0 ? void 0 : _dailySchedule$get2.get(TIME_SLOTS[i + colspan])) || 'OFF') === currentTask) {\n      var _dailySchedule$get2;\n      colspan++;\n    }\n    if (currentTask !== 'OFF') {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan,\n        className: `task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`,\n        children: currentTask\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this));\n    } else {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }, this));\n    }\n    i += colspan;\n  }\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: emp.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), cells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_c = EmployeeRow;\nconst SchedulerApp = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c2 = _s(function SchedulerApp({\n  initialEmployees = [],\n  weekStart\n}, ref) {\n  _s();\n  // State for PTO data fetched from APIs\n  const [ptoMap, setPtoMap] = useState({});\n  const [manualPto, setManualPto] = useState({});\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n\n  // Effect to fetch Google Calendar PTO data when the week changes\n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 7);\n    const endISO = end.toISOString();\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`).then(res => res.ok ? res.json() : Promise.reject(res.statusText)).then(data => {\n      setPtoMap(data.ptoMap || {});\n    }).catch(err => {\n      console.error('Fetch PTO failed:', err);\n      setPtoMap({}); // Reset on error to avoid showing stale data\n    });\n  }, [weekStart]);\n\n  // The single source of truth for the employee list.\n  // It is DERIVED from props and state, not a separate state itself.\n  const employees = useMemo(() => {\n    return initialEmployees.map(emp => {\n      const calendarDates = ptoMap[emp.name] || [];\n      const manualDates = manualPto[emp.name] || [];\n      return {\n        ...emp,\n        // Combine and deduplicate PTO dates from all sources\n        ptoDates: [...new Set([...calendarDates, ...manualDates])]\n      };\n    });\n  }, [initialEmployees, ptoMap, manualPto]);\n\n  // Generate the schedule based on the derived employee data\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n      if (date.getDay() >= 1 && date.getDay() <= 5) {\n        // Only for Mon-Fri\n        fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n      }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n\n  // Expose methods to the parent component (App.js)\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(newPtoMap) {\n      setManualPto(currentManualPto => {\n        const updated = {\n          ...currentManualPto\n        };\n        for (const name in newPtoMap) {\n          updated[name] = [...new Set([...(updated[name] || []), ...newPtoMap[name]])];\n        }\n        return updated;\n      });\n    },\n    clearOverrides() {\n      setManualPto({});\n    }\n  }));\n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scheduler-container\",\n    children: weekdays.map(date => {\n      const dateStr = date.toISOString().split('T')[0];\n      const dailySchedule = weeklySchedule.get(dateStr);\n      if (!dailySchedule) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-schedule\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: date.toLocaleDateString('en-US', {\n            weekday: 'long',\n            month: 'short',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this), TIME_SLOTS.map(slot => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"time-slot-header\",\n                children: slot\n              }, slot, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 43\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(emp => /*#__PURE__*/_jsxDEV(EmployeeRow, {\n              emp: emp,\n              dailySchedule: dailySchedule\n            }, emp.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this)]\n      }, dateStr, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}, \"XTWBwG2bYGvPfCleuohTAM5kqbE=\")), \"XTWBwG2bYGvPfCleuohTAM5kqbE=\");\n_c3 = SchedulerApp;\nexport default SchedulerApp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EmployeeRow\");\n$RefreshReg$(_c2, \"SchedulerApp$forwardRef\");\n$RefreshReg$(_c3, \"SchedulerApp\");","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useMemo","useEffect","jsxDEV","_jsxDEV","TIME_SLOTS","i","push","String","padStart","timeToMinutes","time","hours","minutes","split","map","Number","getWeekDates","start","week","d","Date","setMinutes","getMinutes","getTimezoneOffset","setDate","getDate","getDay","generateDailySchedule","employees","date","schedule","Map","forEach","emp","set","name","dayOfWeek","dateStr","toISOString","dailyTasks","get","hasPTO","Array","isArray","ptoDates","includes","slot","shiftStartMinutes","shift","shiftEndMinutes","end","lunchStartMinutes","lunch","lunchEndMinutes","slotMinutes","dispatchCount","reservationsCount","availableEmployees","filter","_schedule$get","abilities","_schedule$get2","specialistTask","EmployeeRow","dailySchedule","cells","length","_dailySchedule$get","currentTask","colspan","_dailySchedule$get2","colSpan","className","toLowerCase","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","SchedulerApp","_s","_c2","initialEmployees","weekStart","ref","ptoMap","setPtoMap","manualPto","setManualPto","weekDates","parsed","startISO","endISO","fetch","then","res","ok","json","Promise","reject","statusText","data","catch","err","console","error","calendarDates","manualDates","Set","weeklySchedule","fullSchedule","updateEmployeePTOs","newPtoMap","currentManualPto","updated","clearOverrides","weekdays","toLocaleDateString","weekday","month","day","_c3","$RefreshReg$"],"sources":["/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js"],"sourcesContent":["// src/SchedulerApp.js\nimport React, {\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useEffect,\n} from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\n\nconst timeToMinutes = (time) => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\n\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n  const schedule = new Map();\n  employees.forEach(emp => schedule.set(emp.name, new Map()));\n\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n\n  const dateStr = date.toISOString().split('T')[0];\n\n  // Step 1: Initialize schedule with OFF, PTO, and Lunch\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n\n    if (hasPTO) {\n        TIME_SLOTS.forEach(slot => dailyTasks.set(slot, 'PTO'));\n        return; // Skip to next employee if they have PTO\n    }\n    \n    const shiftStartMinutes = timeToMinutes(emp.shift.start);\n    const shiftEndMinutes = timeToMinutes(emp.shift.end);\n    const lunchStartMinutes = timeToMinutes(emp.lunch.start);\n    const lunchEndMinutes = timeToMinutes(emp.lunch.end);\n\n    TIME_SLOTS.forEach(slot => {\n      const slotMinutes = timeToMinutes(slot);\n      if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n        if (emp.lunch.start && slotMinutes >= lunchStartMinutes && slotMinutes < lunchEndMinutes) {\n          dailyTasks.set(slot, 'Lunch');\n        } else {\n          dailyTasks.set(slot, 'Available');\n        }\n      } else {\n        dailyTasks.set(slot, 'OFF');\n      }\n    });\n  });\n\n  // Step 2: Fill mandatory coverage slots\n  TIME_SLOTS.forEach(slot => {\n    const slotMinutes = timeToMinutes(slot);\n    if (slotMinutes < 480 || slotMinutes >= 1020) return;\n\n    let dispatchCount = 0;\n    let reservationsCount = 0;\n    \n    const availableEmployees = employees.filter(emp => schedule.get(emp.name)?.get(slot) === 'Available');\n\n    for (const emp of availableEmployees) {\n      if (dispatchCount < 1 && emp.abilities.includes('Dispatch')) {\n        schedule.get(emp.name).set(slot, 'Dispatch');\n        dispatchCount++;\n      }\n    }\n    \n    for (const emp of availableEmployees) {\n      if (schedule.get(emp.name)?.get(slot) === 'Available') {\n        if (reservationsCount < 3 && emp.abilities.includes('Reservations')) {\n          schedule.get(emp.name).set(slot, 'Reservations');\n          reservationsCount++;\n        }\n      }\n    }\n  });\n\n  // Step 3: Fill remaining slots with specialist tasks\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    TIME_SLOTS.forEach(slot => {\n      if (dailyTasks.get(slot) === 'Available') {\n        dailyTasks.set(slot, emp.specialistTask);\n      }\n    });\n  });\n\n  return schedule;\n}\n\n// --- UI Components ---\nconst EmployeeRow = ({ emp, dailySchedule }) => {\n    const cells = [];\n    let i = 0;\n    while (i < TIME_SLOTS.length) {\n        const currentTask = dailySchedule.get(emp.name)?.get(TIME_SLOTS[i]) || 'OFF';\n        let colspan = 1;\n        while (i + colspan < TIME_SLOTS.length && (dailySchedule.get(emp.name)?.get(TIME_SLOTS[i + colspan]) || 'OFF') === currentTask) {\n            colspan++;\n        }\n\n        if (currentTask !== 'OFF') {\n            cells.push(\n                <td \n                    key={`${emp.name}-${TIME_SLOTS[i]}`} \n                    colSpan={colspan} \n                    className={`task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`}\n                >\n                    {currentTask}\n                </td>\n            );\n        } else {\n             cells.push(<td key={`${emp.name}-${TIME_SLOTS[i]}`} colSpan={colspan}></td>);\n        }\n        i += colspan;\n    }\n\n    return (\n        <tr>\n            <td>{emp.name}</td>\n            {cells}\n        </tr>\n    );\n};\n\nconst SchedulerApp = forwardRef(function SchedulerApp(\n  { initialEmployees = [], weekStart },\n  ref\n) {\n  // State for PTO data fetched from APIs\n  const [ptoMap, setPtoMap] = useState({});\n  const [manualPto, setManualPto] = useState({});\n\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  \n  // Effect to fetch Google Calendar PTO data when the week changes\n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 7);\n    const endISO = end.toISOString();\n\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`)\n      .then(res => res.ok ? res.json() : Promise.reject(res.statusText))\n      .then(data => {\n        setPtoMap(data.ptoMap || {});\n      })\n      .catch(err => {\n        console.error('Fetch PTO failed:', err);\n        setPtoMap({}); // Reset on error to avoid showing stale data\n      });\n  }, [weekStart]);\n\n  // The single source of truth for the employee list.\n  // It is DERIVED from props and state, not a separate state itself.\n  const employees = useMemo(() => {\n    return initialEmployees.map(emp => {\n        const calendarDates = ptoMap[emp.name] || [];\n        const manualDates = manualPto[emp.name] || [];\n        return {\n            ...emp,\n            // Combine and deduplicate PTO dates from all sources\n            ptoDates: [...new Set([...calendarDates, ...manualDates])],\n        };\n    });\n  }, [initialEmployees, ptoMap, manualPto]);\n\n\n  // Generate the schedule based on the derived employee data\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n        if (date.getDay() >= 1 && date.getDay() <= 5) { // Only for Mon-Fri\n            fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n        }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n\n  // Expose methods to the parent component (App.js)\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(newPtoMap) {\n        setManualPto(currentManualPto => {\n            const updated = { ...currentManualPto };\n            for (const name in newPtoMap) {\n                updated[name] = [...new Set([...(updated[name] || []), ...newPtoMap[name]])];\n            }\n            return updated;\n        });\n    },\n    clearOverrides() {\n        setManualPto({});\n    }\n  }));\n  \n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n\n  return (\n    <div className=\"scheduler-container\">\n      {weekdays.map(date => {\n        const dateStr = date.toISOString().split('T')[0];\n        const dailySchedule = weeklySchedule.get(dateStr);\n        if (!dailySchedule) return null;\n\n        return (\n          <div key={dateStr} className=\"day-schedule\">\n            <h3>{date.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}</h3>\n            <table className=\"schedule-table\">\n              <thead>\n                <tr>\n                  <th>Employee</th>\n                  {TIME_SLOTS.map(slot => <th key={slot} className=\"time-slot-header\">{slot}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                {employees.map(emp => (\n                  <EmployeeRow key={emp.name} emp={emp} dailySchedule={dailySchedule} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )\n      })}\n    </div>\n  );\n});\n\nexport default SchedulerApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}