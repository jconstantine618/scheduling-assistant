{"ast":null,"code":"var _jsxFileName = \"/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js\",\n  _s = $RefreshSig$();\n// src/SchedulerApp.js\nimport React, { useState, forwardRef, useImperativeHandle, useMemo, useEffect } from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\nconst timeToMinutes = time => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n  const schedule = new Map();\n  employees.forEach(emp => schedule.set(emp.name, new Map()));\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n  const dateStr = date.toISOString().split('T')[0];\n\n  // Step 1: Initialize with OFF, PTO. Mark working hours as 'Available'.\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n    const shiftStartMinutes = timeToMinutes(emp.shift.start);\n    const shiftEndMinutes = timeToMinutes(emp.shift.end);\n    TIME_SLOTS.forEach(slot => {\n      if (hasPTO) {\n        dailyTasks.set(slot, 'PTO');\n        return;\n      }\n      const slotMinutes = timeToMinutes(slot);\n      if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n        dailyTasks.set(slot, 'Available');\n      } else {\n        dailyTasks.set(slot, 'OFF');\n      }\n    });\n  });\n\n  // Step 2: Assign Lunches Strategically to maintain coverage\n  const lunchWindows = [{\n    start: '11:00',\n    end: '12:30'\n  }, {\n    start: '12:00',\n    end: '13:30'\n  }, {\n    start: '12:30',\n    end: '14:00'\n  }];\n  const renoLunch = {\n    start: '15:00',\n    end: '16:00'\n  };\n  employees.forEach(emp => {\n    var _schedule$get;\n    if (((_schedule$get = schedule.get(emp.name)) === null || _schedule$get === void 0 ? void 0 : _schedule$get.get(TIME_SLOTS[0])) === 'PTO') return;\n    const empLunchWindows = emp.name === 'Katy' ? [renoLunch] : lunchWindows;\n    for (const window of empLunchWindows) {\n      const lunchStartMinutes = timeToMinutes(window.start);\n      const lunchEndMinutes = timeToMinutes(window.end);\n      let isWindowAvailable = true;\n\n      // Check if the entire lunch window is within the employee's available time\n      for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n        var _schedule$get2;\n        const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n        if (!slot || ((_schedule$get2 = schedule.get(emp.name)) === null || _schedule$get2 === void 0 ? void 0 : _schedule$get2.get(slot)) !== 'Available') {\n          isWindowAvailable = false;\n          break;\n        }\n      }\n      if (isWindowAvailable) {\n        // Tentatively assign lunch and check coverage\n        for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n          const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n          schedule.get(emp.name).set(slot, 'Lunch');\n        }\n\n        // This is a simplified check. A full check would be more complex.\n        // For now, we assume placing one lunch won't break coverage.\n        // A more robust solution would check coverage here and revert if it breaks.\n        break; // Assign first available window\n      }\n    }\n  });\n\n  // Step 3: Fill mandatory coverage slots\n  TIME_SLOTS.forEach(slot => {\n    var _schedule$get3;\n    if (((_schedule$get3 = schedule.get(employees[0].name)) === null || _schedule$get3 === void 0 ? void 0 : _schedule$get3.get(slot)) === 'OFF') return;\n    const slotMinutes = timeToMinutes(slot);\n    let neededReservations = slotMinutes >= 480 && slotMinutes < 1020 ? 3 : slotMinutes >= 1020 ? 2 : 0;\n    let neededDispatch = slotMinutes >= 480 ? 1 : 0;\n    const assignedInSlot = {\n      Reservations: 0,\n      Dispatch: 0\n    };\n    employees.forEach(e => {\n      const task = schedule.get(e.name).get(slot);\n      if (task === \"Reservations\" || task === \"Dispatch\") assignedInSlot[task]++;\n    });\n    const availableForSlot = employees.filter(e => schedule.get(e.name).get(slot) === 'Available');\n    for (const emp of availableForSlot) {\n      const abilities = emp.abilities;\n      if (assignedInSlot.Dispatch < neededDispatch && abilities.includes('Dispatch')) {\n        schedule.get(emp.name).set(slot, 'Dispatch');\n        assignedInSlot.Dispatch++;\n      } else if (assignedInSlot.Reservations < neededReservations && abilities.includes('Reservations')) {\n        schedule.get(emp.name).set(slot, 'Reservations');\n        assignedInSlot.Reservations++;\n      }\n    }\n  });\n\n  // Step 4: Fill remaining 'Available' slots with specialist tasks\n  employees.forEach(emp => {\n    if (emp.name === 'Antje') {\n      // Antje only does Journey Desk\n      TIME_SLOTS.forEach(slot => {\n        if (schedule.get(emp.name).get(slot) === 'Available') {\n          schedule.get(emp.name).set(slot, 'Journey Desk');\n        }\n      });\n    } else {\n      TIME_SLOTS.forEach(slot => {\n        if (schedule.get(emp.name).get(slot) === 'Available') {\n          schedule.get(emp.name).set(slot, emp.specialistTask);\n        }\n      });\n    }\n  });\n  return schedule;\n}\n\n// --- UI Components ---\nconst EmployeeRow = ({\n  emp,\n  dailySchedule\n}) => {\n  const cells = [];\n  let i = 0;\n  while (i < TIME_SLOTS.length) {\n    var _dailySchedule$get;\n    const currentTask = ((_dailySchedule$get = dailySchedule.get(emp.name)) === null || _dailySchedule$get === void 0 ? void 0 : _dailySchedule$get.get(TIME_SLOTS[i])) || 'OFF';\n    let colspan = 1;\n    while (i + colspan < TIME_SLOTS.length && (((_dailySchedule$get2 = dailySchedule.get(emp.name)) === null || _dailySchedule$get2 === void 0 ? void 0 : _dailySchedule$get2.get(TIME_SLOTS[i + colspan])) || 'OFF') === currentTask) {\n      var _dailySchedule$get2;\n      colspan++;\n    }\n    if (currentTask !== 'OFF' && currentTask !== 'Available') {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan,\n        className: `task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`,\n        children: currentTask\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this));\n    } else {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }, this));\n    }\n    i += colspan;\n  }\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: emp.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), cells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 186,\n    columnNumber: 9\n  }, this);\n};\n_c = EmployeeRow;\nconst SchedulerApp = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c2 = _s(function SchedulerApp({\n  initialEmployees = [],\n  weekStart\n}, ref) {\n  _s();\n  const [ptoMap, setPtoMap] = useState({});\n  const [manualPto, setManualPto] = useState({});\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 7);\n    const endISO = end.toISOString();\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`).then(res => res.ok ? res.json() : Promise.reject(res.statusText)).then(data => setPtoMap(data.ptoMap || {})).catch(err => {\n      console.error('Fetch PTO failed:', err);\n      setPtoMap({});\n    });\n  }, [weekStart]);\n  const employees = useMemo(() => {\n    return initialEmployees.map(emp => {\n      const calendarDates = ptoMap[emp.name] || [];\n      const manualDates = manualPto[emp.name] || [];\n      return {\n        ...emp,\n        ptoDates: [...new Set([...calendarDates, ...manualDates])]\n      };\n    });\n  }, [initialEmployees, ptoMap, manualPto]);\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n      if (date.getDay() >= 1 && date.getDay() <= 5) {\n        fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n      }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(newPtoMap) {\n      setManualPto(currentManualPto => {\n        const updated = {\n          ...currentManualPto\n        };\n        for (const name in newPtoMap) {\n          updated[name] = [...new Set([...(updated[name] || []), ...newPtoMap[name]])];\n        }\n        return updated;\n      });\n    },\n    clearOverrides() {\n      setManualPto({});\n    }\n  }));\n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scheduler-container\",\n    children: weekdays.map(date => {\n      const dateStr = date.toISOString().split('T')[0];\n      const dailySchedule = weeklySchedule.get(dateStr);\n      if (!dailySchedule) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-schedule\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: date.toLocaleDateString('en-US', {\n            weekday: 'long',\n            month: 'short',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this), TIME_SLOTS.map(slot => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: `time-slot-header ${slot.endsWith(':30') ? 'half-hour' : 'full-hour'}`,\n                children: slot.endsWith(':00') ? slot.replace(':', '') : ''\n              }, slot, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(emp => /*#__PURE__*/_jsxDEV(EmployeeRow, {\n              emp: emp,\n              dailySchedule: dailySchedule\n            }, emp.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)]\n      }, dateStr, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}, \"XTWBwG2bYGvPfCleuohTAM5kqbE=\")), \"XTWBwG2bYGvPfCleuohTAM5kqbE=\");\n_c3 = SchedulerApp;\nexport default SchedulerApp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EmployeeRow\");\n$RefreshReg$(_c2, \"SchedulerApp$forwardRef\");\n$RefreshReg$(_c3, \"SchedulerApp\");","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useMemo","useEffect","jsxDEV","_jsxDEV","TIME_SLOTS","i","push","String","padStart","timeToMinutes","time","hours","minutes","split","map","Number","getWeekDates","start","week","d","Date","setMinutes","getMinutes","getTimezoneOffset","setDate","getDate","getDay","generateDailySchedule","employees","date","schedule","Map","forEach","emp","set","name","dayOfWeek","dateStr","toISOString","dailyTasks","get","hasPTO","Array","isArray","ptoDates","includes","shiftStartMinutes","shift","shiftEndMinutes","end","slot","slotMinutes","lunchWindows","renoLunch","_schedule$get","empLunchWindows","window","lunchStartMinutes","lunchEndMinutes","isWindowAvailable","min","_schedule$get2","find","s","_schedule$get3","neededReservations","neededDispatch","assignedInSlot","Reservations","Dispatch","e","task","availableForSlot","filter","abilities","specialistTask","EmployeeRow","dailySchedule","cells","length","_dailySchedule$get","currentTask","colspan","_dailySchedule$get2","colSpan","className","toLowerCase","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","SchedulerApp","_s","_c2","initialEmployees","weekStart","ref","ptoMap","setPtoMap","manualPto","setManualPto","weekDates","parsed","startISO","endISO","fetch","then","res","ok","json","Promise","reject","statusText","data","catch","err","console","error","calendarDates","manualDates","Set","weeklySchedule","fullSchedule","updateEmployeePTOs","newPtoMap","currentManualPto","updated","clearOverrides","weekdays","toLocaleDateString","weekday","month","day","endsWith","_c3","$RefreshReg$"],"sources":["/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js"],"sourcesContent":["// src/SchedulerApp.js\nimport React, {\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useEffect,\n} from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\n\nconst timeToMinutes = (time) => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\n\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n    const schedule = new Map();\n    employees.forEach(emp => schedule.set(emp.name, new Map()));\n\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n\n    const dateStr = date.toISOString().split('T')[0];\n\n    // Step 1: Initialize with OFF, PTO. Mark working hours as 'Available'.\n    employees.forEach(emp => {\n        const dailyTasks = schedule.get(emp.name);\n        const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n        const shiftStartMinutes = timeToMinutes(emp.shift.start);\n        const shiftEndMinutes = timeToMinutes(emp.shift.end);\n\n        TIME_SLOTS.forEach(slot => {\n            if (hasPTO) {\n                dailyTasks.set(slot, 'PTO');\n                return;\n            }\n            const slotMinutes = timeToMinutes(slot);\n            if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n                dailyTasks.set(slot, 'Available');\n            } else {\n                dailyTasks.set(slot, 'OFF');\n            }\n        });\n    });\n\n    // Step 2: Assign Lunches Strategically to maintain coverage\n    const lunchWindows = [\n        { start: '11:00', end: '12:30' },\n        { start: '12:00', end: '13:30' },\n        { start: '12:30', end: '14:00' },\n    ];\n    const renoLunch = { start: '15:00', end: '16:00' };\n\n    employees.forEach(emp => {\n        if (schedule.get(emp.name)?.get(TIME_SLOTS[0]) === 'PTO') return;\n\n        const empLunchWindows = emp.name === 'Katy' ? [renoLunch] : lunchWindows;\n        \n        for (const window of empLunchWindows) {\n            const lunchStartMinutes = timeToMinutes(window.start);\n            const lunchEndMinutes = timeToMinutes(window.end);\n            let isWindowAvailable = true;\n\n            // Check if the entire lunch window is within the employee's available time\n            for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n                const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n                if (!slot || schedule.get(emp.name)?.get(slot) !== 'Available') {\n                    isWindowAvailable = false;\n                    break;\n                }\n            }\n\n            if (isWindowAvailable) {\n                // Tentatively assign lunch and check coverage\n                for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n                    const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n                    schedule.get(emp.name).set(slot, 'Lunch');\n                }\n                \n                // This is a simplified check. A full check would be more complex.\n                // For now, we assume placing one lunch won't break coverage.\n                // A more robust solution would check coverage here and revert if it breaks.\n                break; // Assign first available window\n            }\n        }\n    });\n\n    // Step 3: Fill mandatory coverage slots\n    TIME_SLOTS.forEach(slot => {\n        if (schedule.get(employees[0].name)?.get(slot) === 'OFF') return;\n\n        const slotMinutes = timeToMinutes(slot);\n        let neededReservations = (slotMinutes >= 480 && slotMinutes < 1020) ? 3 : (slotMinutes >= 1020 ? 2 : 0);\n        let neededDispatch = (slotMinutes >= 480) ? 1 : 0;\n\n        const assignedInSlot = { Reservations: 0, Dispatch: 0 };\n        employees.forEach(e => {\n            const task = schedule.get(e.name).get(slot);\n            if(task === \"Reservations\" || task === \"Dispatch\") assignedInSlot[task]++;\n        });\n\n        const availableForSlot = employees.filter(e => schedule.get(e.name).get(slot) === 'Available');\n\n        for (const emp of availableForSlot) {\n            const abilities = emp.abilities;\n            if (assignedInSlot.Dispatch < neededDispatch && abilities.includes('Dispatch')) {\n                schedule.get(emp.name).set(slot, 'Dispatch');\n                assignedInSlot.Dispatch++;\n            } else if (assignedInSlot.Reservations < neededReservations && abilities.includes('Reservations')) {\n                schedule.get(emp.name).set(slot, 'Reservations');\n                assignedInSlot.Reservations++;\n            }\n        }\n    });\n\n    // Step 4: Fill remaining 'Available' slots with specialist tasks\n    employees.forEach(emp => {\n        if (emp.name === 'Antje') { // Antje only does Journey Desk\n            TIME_SLOTS.forEach(slot => {\n                if(schedule.get(emp.name).get(slot) === 'Available') {\n                    schedule.get(emp.name).set(slot, 'Journey Desk');\n                }\n            });\n        } else {\n            TIME_SLOTS.forEach(slot => {\n                if (schedule.get(emp.name).get(slot) === 'Available') {\n                    schedule.get(emp.name).set(slot, emp.specialistTask);\n                }\n            });\n        }\n    });\n\n    return schedule;\n}\n\n\n// --- UI Components ---\nconst EmployeeRow = ({ emp, dailySchedule }) => {\n    const cells = [];\n    let i = 0;\n    while (i < TIME_SLOTS.length) {\n        const currentTask = dailySchedule.get(emp.name)?.get(TIME_SLOTS[i]) || 'OFF';\n        let colspan = 1;\n        while (i + colspan < TIME_SLOTS.length && (dailySchedule.get(emp.name)?.get(TIME_SLOTS[i + colspan]) || 'OFF') === currentTask) {\n            colspan++;\n        }\n\n        if (currentTask !== 'OFF' && currentTask !== 'Available') {\n            cells.push(\n                <td \n                    key={`${emp.name}-${TIME_SLOTS[i]}`} \n                    colSpan={colspan} \n                    className={`task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`}\n                >\n                    {currentTask}\n                </td>\n            );\n        } else {\n             cells.push(<td key={`${emp.name}-${TIME_SLOTS[i]}`} colSpan={colspan}></td>);\n        }\n        i += colspan;\n    }\n\n    return (\n        <tr>\n            <td>{emp.name}</td>\n            {cells}\n        </tr>\n    );\n};\n\nconst SchedulerApp = forwardRef(function SchedulerApp(\n  { initialEmployees = [], weekStart },\n  ref\n) {\n  const [ptoMap, setPtoMap] = useState({});\n  const [manualPto, setManualPto] = useState({});\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  \n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 7);\n    const endISO = end.toISOString();\n\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`)\n      .then(res => res.ok ? res.json() : Promise.reject(res.statusText))\n      .then(data => setPtoMap(data.ptoMap || {}))\n      .catch(err => {\n        console.error('Fetch PTO failed:', err);\n        setPtoMap({});\n      });\n  }, [weekStart]);\n\n  const employees = useMemo(() => {\n    return initialEmployees.map(emp => {\n        const calendarDates = ptoMap[emp.name] || [];\n        const manualDates = manualPto[emp.name] || [];\n        return {\n            ...emp,\n            ptoDates: [...new Set([...calendarDates, ...manualDates])],\n        };\n    });\n  }, [initialEmployees, ptoMap, manualPto]);\n\n\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n        if (date.getDay() >= 1 && date.getDay() <= 5) {\n            fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n        }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(newPtoMap) {\n        setManualPto(currentManualPto => {\n            const updated = { ...currentManualPto };\n            for (const name in newPtoMap) {\n                updated[name] = [...new Set([...(updated[name] || []), ...newPtoMap[name]])];\n            }\n            return updated;\n        });\n    },\n    clearOverrides() {\n        setManualPto({});\n    }\n  }));\n  \n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n\n  return (\n    <div className=\"scheduler-container\">\n      {weekdays.map(date => {\n        const dateStr = date.toISOString().split('T')[0];\n        const dailySchedule = weeklySchedule.get(dateStr);\n        if (!dailySchedule) return null;\n\n        return (\n          <div key={dateStr} className=\"day-schedule\">\n            <h3>{date.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}</h3>\n            <table className=\"schedule-table\">\n              <thead>\n                <tr>\n                  <th>Employee</th>\n                  {TIME_SLOTS.map(slot => (\n                    <th key={slot} className={`time-slot-header ${slot.endsWith(':30') ? 'half-hour' : 'full-hour'}`}>\n                      {slot.endsWith(':00') ? slot.replace(':', '') : ''}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {employees.map(emp => (\n                  <EmployeeRow key={emp.name} emp={emp} dailySchedule={dailySchedule} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )\n      })}\n    </div>\n  );\n});\n\nexport default SchedulerApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}