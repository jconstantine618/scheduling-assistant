{"ast":null,"code":"var _jsxFileName = \"/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js\",\n  _s = $RefreshSig$();\n// src/SchedulerApp.js\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport \"./App.css\";\n\n// simple date helper to produce array of dates for the week\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setDate(d.getDate() - d.getDay()); // go to Sunday\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n/**\n * Props:\n *  - initialEmployees: array of employee objects\n *  - weekStart: ISO date string (YYYY-MM-DD) or Date object within the target week\n */\nconst SchedulerApp = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(function SchedulerApp({\n  initialEmployees,\n  weekStart\n}, ref) {\n  _s();\n  // employees state with PTO\n  const [employees, setEmployees] = useState(initialEmployees || []);\n  // compute weekDates once and update whenever weekStart changes\n  const [weekDates, setWeekDates] = useState(() => getWeekDates(weekStart || new Date()));\n\n  // recalc weekDates when weekStart updates\n  useEffect(() => {\n    const parsedDate = weekStart ? new Date(weekStart) : new Date();\n    setWeekDates(getWeekDates(parsedDate));\n  }, [weekStart]);\n\n  // fetch PTO events for the current week\n  useEffect(() => {\n    async function loadPTO() {\n      try {\n        // use first day of week as start param\n        const start = weekDates[0].toISOString().split('T')[0];\n        const res = await fetch(`/api/pto-calendar?start=${start}`);\n        if (!res.ok) throw new Error(`Fetch PTO failed: ${res.status}`);\n        const {\n          events\n        } = await res.json();\n        // map employee names to PTO date strings\n        const ptoMap = {};\n        events.forEach(ev => {\n          const name = ev.summary.split(' ')[0]; // assumes \"Name on PTO\"\n          const date = ev.start.date || ev.start.dateTime.split('T')[0];\n          ptoMap[name] = ptoMap[name] || [];\n          ptoMap[name].push(date);\n        });\n        // apply PTO map on top of initialEmployees\n        setEmployees(prev => (initialEmployees || []).map(emp => ({\n          ...emp,\n          ptoDates: ptoMap[emp.name] || []\n        })));\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    if (weekDates.length) loadPTO();\n  }, [weekDates, initialEmployees]);\n\n  // expose methods to parent via ref\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(ptoMap) {\n      setEmployees(prev => prev.map(emp => ({\n        ...emp,\n        ptoDates: ptoMap[emp.name] || []\n      })));\n    },\n    clearOverrides() {\n      setEmployees(initialEmployees || []);\n    }\n  }), [initialEmployees]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scheduler-panel\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), weekDates.map(d => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: d.toLocaleDateString('en-US', {\n              weekday: 'short',\n              month: 'numeric',\n              day: 'numeric'\n            })\n          }, d.toDateString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(emp => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: emp.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this), weekDates.map(d => {\n            const dateStr = d.toISOString().split('T')[0];\n            const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: hasPTO ? 'PTO' : ''\n            }, dateStr, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 24\n            }, this);\n          })]\n        }, emp.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}, \"lnc0ctpjEvF+/PYN4tDjklACeXM=\")), \"lnc0ctpjEvF+/PYN4tDjklACeXM=\");\n_c2 = SchedulerApp;\nexport default SchedulerApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"SchedulerApp$forwardRef\");\n$RefreshReg$(_c2, \"SchedulerApp\");","map":{"version":3,"names":["React","useState","useEffect","forwardRef","useImperativeHandle","jsxDEV","_jsxDEV","getWeekDates","start","week","d","Date","setDate","getDate","getDay","i","push","SchedulerApp","_s","_c","initialEmployees","weekStart","ref","employees","setEmployees","weekDates","setWeekDates","parsedDate","loadPTO","toISOString","split","res","fetch","ok","Error","status","events","json","ptoMap","forEach","ev","name","summary","date","dateTime","prev","map","emp","ptoDates","err","console","error","length","updateEmployeePTOs","clearOverrides","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleDateString","weekday","month","day","toDateString","dateStr","hasPTO","Array","isArray","includes","_c2","$RefreshReg$"],"sources":["/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js"],"sourcesContent":["// src/SchedulerApp.js\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport \"./App.css\";\n\n// simple date helper to produce array of dates for the week\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setDate(d.getDate() - d.getDay()); // go to Sunday\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n/**\n * Props:\n *  - initialEmployees: array of employee objects\n *  - weekStart: ISO date string (YYYY-MM-DD) or Date object within the target week\n */\nconst SchedulerApp = forwardRef(function SchedulerApp({ initialEmployees, weekStart }, ref) {\n  // employees state with PTO\n  const [employees, setEmployees] = useState(initialEmployees || []);\n  // compute weekDates once and update whenever weekStart changes\n  const [weekDates, setWeekDates] = useState(() => getWeekDates(weekStart || new Date()));\n\n  // recalc weekDates when weekStart updates\n  useEffect(() => {\n    const parsedDate = weekStart ? new Date(weekStart) : new Date();\n    setWeekDates(getWeekDates(parsedDate));\n  }, [weekStart]);\n\n  // fetch PTO events for the current week\n  useEffect(() => {\n    async function loadPTO() {\n      try {\n        // use first day of week as start param\n        const start = weekDates[0].toISOString().split('T')[0];\n        const res = await fetch(`/api/pto-calendar?start=${start}`);\n        if (!res.ok) throw new Error(`Fetch PTO failed: ${res.status}`);\n        const { events } = await res.json();\n        // map employee names to PTO date strings\n        const ptoMap = {};\n        events.forEach(ev => {\n          const name = ev.summary.split(' ')[0];             // assumes \"Name on PTO\"\n          const date = ev.start.date || ev.start.dateTime.split('T')[0];\n          ptoMap[name] = ptoMap[name] || [];\n          ptoMap[name].push(date);\n        });\n        // apply PTO map on top of initialEmployees\n        setEmployees(prev =>\n          (initialEmployees || []).map(emp => ({\n            ...emp,\n            ptoDates: ptoMap[emp.name] || []\n          }))\n        );\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    if (weekDates.length) loadPTO();\n  }, [weekDates, initialEmployees]);\n\n  // expose methods to parent via ref\n  useImperativeHandle(\n    ref,\n    () => ({\n      updateEmployeePTOs(ptoMap) {\n        setEmployees(prev =>\n          prev.map(emp => ({ ...emp, ptoDates: ptoMap[emp.name] || [] }))\n        );\n      },\n      clearOverrides() {\n        setEmployees(initialEmployees || []);\n      }\n    }),\n    [initialEmployees]\n  );\n\n  return (\n    <div className=\"scheduler-panel\">\n      <table>\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map(d => (\n              <th key={d.toDateString()}>\n                {d.toLocaleDateString('en-US', { weekday: 'short', month: 'numeric', day: 'numeric' })}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map(emp => (\n            <tr key={emp.name}>\n              <td>{emp.name}</td>\n              {weekDates.map(d => {\n                const dateStr = d.toISOString().split('T')[0];\n                const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n                return <td key={dateStr}>{hasPTO ? 'PTO' : ''}</td>;\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nexport default SchedulerApp;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}