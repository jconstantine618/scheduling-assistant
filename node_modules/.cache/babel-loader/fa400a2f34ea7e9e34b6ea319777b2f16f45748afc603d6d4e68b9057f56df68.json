{"ast":null,"code":"var _jsxFileName = \"/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js\",\n  _s = $RefreshSig$();\n// src/SchedulerApp.js\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from \"react\";\nimport \"./App.css\";\n\n// simple date helper to produce array of dates for the week\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setDate(d.getDate() - d.getDay()); // go to Sunday\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n/**\n * Props:\n *  - initialEmployees: array of employee objects\n *  - weekStart: an ISO string (\"YYYY-MM-DD\") representing any day in the week\n */\nconst SchedulerApp = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(function SchedulerApp({\n  initialEmployees,\n  weekStart\n}, ref) {\n  _s();\n  // 1) Track employees state (with PTO)\n  const [employees, setEmployees] = useState(initialEmployees || []);\n\n  // 2) Track the seven dates of the current week\n  const [weekDates, setWeekDates] = useState(getWeekDates(weekStart || new Date()));\n\n  // whenever the parent changes weekStart → recompute weekDates\n  useEffect(() => {\n    const parsed = weekStart ? new Date(weekStart) : new Date();\n    setWeekDates(getWeekDates(parsed));\n  }, [weekStart]);\n\n  // 3) Whenever weekDates changes, fetch PTO for that window\n  useEffect(() => {\n    async function loadCalendarPTO() {\n      if (!weekDates.length) return;\n      const start = weekDates[0].toISOString();\n      const end = weekDates[6].toISOString();\n      try {\n        const res = await fetch(`/api/pto-calendar?start=${encodeURIComponent(start)}&end=${encodeURIComponent(end)}`);\n        if (!res.ok) {\n          throw new Error(`Calendar fetch failed: ${res.statusText}`);\n        }\n        const {\n          ptoMap\n        } = await res.json();\n\n        // merge PTO into your initial list\n        setEmployees(initialEmployees.map(emp => ({\n          ...emp,\n          ptoDates: ptoMap[emp.name] || []\n        })));\n      } catch (err) {\n        console.error(\"Error loading PTO from calendar:\", err);\n        // on error, fall back to just the raw initialEmployees\n        setEmployees(initialEmployees);\n      }\n    }\n    loadCalendarPTO();\n  }, [weekDates, initialEmployees]);\n\n  // 4) Expose your “clear” and “overwrite” helpers back up to App.js\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(ptoMap) {\n      setEmployees(emps => emps.map(emp => ({\n        ...emp,\n        ptoDates: ptoMap[emp.name] || []\n      })));\n    },\n    clearOverrides() {\n      setEmployees(initialEmployees);\n    }\n  }));\n\n  // finally, render your table\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scheduler-panel\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Employee\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), weekDates.map(d => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: d.toLocaleDateString(\"en-US\", {\n              weekday: \"short\",\n              month: \"numeric\",\n              day: \"numeric\"\n            })\n          }, d.toDateString(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: employees.map(emp => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: emp.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this), weekDates.map(d => {\n            const dateStr = d.toISOString().split(\"T\")[0];\n            const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              children: hasPTO ? \"PTO\" : \"\"\n            }, dateStr, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 24\n            }, this);\n          })]\n        }, emp.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}, \"8Mk27WwK+EWzsPegJZxTI0AIRuI=\")), \"8Mk27WwK+EWzsPegJZxTI0AIRuI=\");\n_c2 = SchedulerApp;\nexport default SchedulerApp;\nvar _c, _c2;\n$RefreshReg$(_c, \"SchedulerApp$forwardRef\");\n$RefreshReg$(_c2, \"SchedulerApp\");","map":{"version":3,"names":["React","useState","useEffect","forwardRef","useImperativeHandle","jsxDEV","_jsxDEV","getWeekDates","start","week","d","Date","setDate","getDate","getDay","i","push","SchedulerApp","_s","_c","initialEmployees","weekStart","ref","employees","setEmployees","weekDates","setWeekDates","parsed","loadCalendarPTO","length","toISOString","end","res","fetch","encodeURIComponent","ok","Error","statusText","ptoMap","json","map","emp","ptoDates","name","err","console","error","updateEmployeePTOs","emps","clearOverrides","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleDateString","weekday","month","day","toDateString","dateStr","split","hasPTO","Array","isArray","includes","_c2","$RefreshReg$"],"sources":["/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js"],"sourcesContent":["// src/SchedulerApp.js\nimport React, {\n  useState,\n  useEffect,\n  forwardRef,\n  useImperativeHandle\n} from \"react\";\nimport \"./App.css\";\n\n// simple date helper to produce array of dates for the week\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setDate(d.getDate() - d.getDay()); // go to Sunday\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n/**\n * Props:\n *  - initialEmployees: array of employee objects\n *  - weekStart: an ISO string (\"YYYY-MM-DD\") representing any day in the week\n */\nconst SchedulerApp = forwardRef(function SchedulerApp(\n  { initialEmployees, weekStart },\n  ref\n) {\n  // 1) Track employees state (with PTO)\n  const [employees, setEmployees] = useState(initialEmployees || []);\n\n  // 2) Track the seven dates of the current week\n  const [weekDates, setWeekDates] = useState(\n    getWeekDates(weekStart || new Date())\n  );\n\n  // whenever the parent changes weekStart → recompute weekDates\n  useEffect(() => {\n    const parsed = weekStart ? new Date(weekStart) : new Date();\n    setWeekDates(getWeekDates(parsed));\n  }, [weekStart]);\n\n  // 3) Whenever weekDates changes, fetch PTO for that window\n  useEffect(() => {\n    async function loadCalendarPTO() {\n      if (!weekDates.length) return;\n\n      const start = weekDates[0].toISOString();\n      const end = weekDates[6].toISOString();\n\n      try {\n        const res = await fetch(\n          `/api/pto-calendar?start=${encodeURIComponent(\n            start\n          )}&end=${encodeURIComponent(end)}`\n        );\n        if (!res.ok) {\n          throw new Error(`Calendar fetch failed: ${res.statusText}`);\n        }\n        const { ptoMap } = await res.json();\n\n        // merge PTO into your initial list\n        setEmployees(\n          initialEmployees.map((emp) => ({\n            ...emp,\n            ptoDates: ptoMap[emp.name] || [],\n          }))\n        );\n      } catch (err) {\n        console.error(\"Error loading PTO from calendar:\", err);\n        // on error, fall back to just the raw initialEmployees\n        setEmployees(initialEmployees);\n      }\n    }\n\n    loadCalendarPTO();\n  }, [weekDates, initialEmployees]);\n\n  // 4) Expose your “clear” and “overwrite” helpers back up to App.js\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(ptoMap) {\n      setEmployees((emps) =>\n        emps.map((emp) => ({\n          ...emp,\n          ptoDates: ptoMap[emp.name] || [],\n        }))\n      );\n    },\n    clearOverrides() {\n      setEmployees(initialEmployees);\n    },\n  }));\n\n  // finally, render your table\n  return (\n    <div className=\"scheduler-panel\">\n      <table>\n        <thead>\n          <tr>\n            <th>Employee</th>\n            {weekDates.map((d) => (\n              <th key={d.toDateString()}>\n                {d.toLocaleDateString(\"en-US\", {\n                  weekday: \"short\",\n                  month: \"numeric\",\n                  day: \"numeric\",\n                })}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {employees.map((emp) => (\n            <tr key={emp.name}>\n              <td>{emp.name}</td>\n              {weekDates.map((d) => {\n                const dateStr = d.toISOString().split(\"T\")[0];\n                const hasPTO =\n                  Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n                return <td key={dateStr}>{hasPTO ? \"PTO\" : \"\"}</td>;\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n\nexport default SchedulerApp;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}