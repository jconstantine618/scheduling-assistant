{"ast":null,"code":"var _jsxFileName = \"/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js\",\n  _s = $RefreshSig$();\n// src/SchedulerApp.js\nimport React, { useState, forwardRef, useImperativeHandle, useMemo, useEffect } from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\nconst timeToMinutes = time => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n  const schedule = new Map();\n  employees.forEach(emp => schedule.set(emp.name, new Map()));\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n  const dateStr = date.toISOString().split('T')[0];\n\n  // Step 1: Initialize schedule with OFF, PTO, and Lunch\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n    const shiftStartMinutes = timeToMinutes(emp.shift.start);\n    const shiftEndMinutes = timeToMinutes(emp.shift.end);\n    const lunchStartMinutes = timeToMinutes(emp.lunch.start);\n    const lunchEndMinutes = timeToMinutes(emp.lunch.end);\n    TIME_SLOTS.forEach(slot => {\n      if (hasPTO) {\n        dailyTasks.set(slot, 'PTO');\n        return;\n      }\n      const slotMinutes = timeToMinutes(slot);\n      if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n        if (emp.lunch.start && slotMinutes >= lunchStartMinutes && slotMinutes < lunchEndMinutes) {\n          dailyTasks.set(slot, 'Lunch');\n        } else {\n          dailyTasks.set(slot, 'Available'); // Mark as available for now\n        }\n      } else {\n        dailyTasks.set(slot, 'OFF');\n      }\n    });\n  });\n\n  // Step 2: Fill mandatory coverage slots (Reservations & Dispatch)\n  TIME_SLOTS.forEach(slot => {\n    const slotMinutes = timeToMinutes(slot);\n    if (slotMinutes < 480 || slotMinutes >= 1020) {\n      return;\n    }\n    let dispatchCount = 0;\n    let reservationsCount = 0;\n    const availableEmployees = employees.filter(emp => {\n      var _schedule$get;\n      return ((_schedule$get = schedule.get(emp.name)) === null || _schedule$get === void 0 ? void 0 : _schedule$get.get(slot)) === 'Available';\n    });\n    for (const emp of availableEmployees) {\n      if (dispatchCount < 1 && emp.abilities.includes('Dispatch')) {\n        schedule.get(emp.name).set(slot, 'Dispatch');\n        dispatchCount++;\n      }\n    }\n    for (const emp of availableEmployees) {\n      var _schedule$get2;\n      if (((_schedule$get2 = schedule.get(emp.name)) === null || _schedule$get2 === void 0 ? void 0 : _schedule$get2.get(slot)) === 'Available') {\n        if (reservationsCount < 3 && emp.abilities.includes('Reservations')) {\n          schedule.get(emp.name).set(slot, 'Reservations');\n          reservationsCount++;\n        }\n      }\n    }\n  });\n\n  // Step 3: Fill remaining 'Available' slots with specialist tasks\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    TIME_SLOTS.forEach(slot => {\n      if (dailyTasks.get(slot) === 'Available') {\n        dailyTasks.set(slot, emp.specialistTask);\n      }\n    });\n  });\n  return schedule;\n}\n\n// --- UI Components ---\nconst EmployeeRow = ({\n  emp,\n  dailySchedule\n}) => {\n  const cells = [];\n  let i = 0;\n  while (i < TIME_SLOTS.length) {\n    var _dailySchedule$get;\n    const currentTask = ((_dailySchedule$get = dailySchedule.get(emp.name)) === null || _dailySchedule$get === void 0 ? void 0 : _dailySchedule$get.get(TIME_SLOTS[i])) || 'OFF';\n    let colspan = 1;\n    while (i + colspan < TIME_SLOTS.length && (((_dailySchedule$get2 = dailySchedule.get(emp.name)) === null || _dailySchedule$get2 === void 0 ? void 0 : _dailySchedule$get2.get(TIME_SLOTS[i + colspan])) || 'OFF') === currentTask) {\n      var _dailySchedule$get2;\n      colspan++;\n    }\n    if (currentTask !== 'OFF') {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan,\n        className: `task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`,\n        children: currentTask\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this));\n    } else {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }, this));\n    }\n    i += colspan;\n  }\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: emp.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), cells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 9\n  }, this);\n};\n_c = EmployeeRow;\nconst SchedulerApp = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c2 = _s(function SchedulerApp({\n  initialEmployees = [],\n  weekStart\n}, ref) {\n  _s();\n  const [employees, setEmployees] = useState(initialEmployees);\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 6);\n    const endISO = end.toISOString();\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`).then(res => res.ok ? res.json() : Promise.reject(res.statusText)).then(({\n      ptoMap\n    }) => {\n      // **FIX:** Use the functional update form of setState\n      // This ensures we are updating the CURRENT state, not overwriting it.\n      setEmployees(currentEmployees => currentEmployees.map(emp => ({\n        ...emp,\n        ptoDates: Array.isArray(ptoMap[emp.name]) ? ptoMap[emp.name] : emp.ptoDates || []\n      })));\n    }).catch(err => console.error('Fetch PTO failed:', err));\n  }, [weekStart]);\n\n  // This effect ensures that if the initialEmployees prop changes, the internal state resets.\n  useEffect(() => {\n    setEmployees(initialEmployees);\n  }, [initialEmployees]);\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n      if (date.getDay() >= 1 && date.getDay() <= 5) {\n        fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n      }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n  useImperativeHandle(ref, () => ({\n    // ...\n  }));\n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scheduler-container\",\n    children: weekdays.map(date => {\n      const dateStr = date.toISOString().split('T')[0];\n      const dailySchedule = weeklySchedule.get(dateStr);\n      if (!dailySchedule) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-schedule\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: date.toLocaleDateString('en-US', {\n            weekday: 'long',\n            month: 'short',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this), TIME_SLOTS.map(slot => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"time-slot-header\",\n                children: slot\n              }, slot, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 43\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(emp => /*#__PURE__*/_jsxDEV(EmployeeRow, {\n              emp: emp,\n              dailySchedule: dailySchedule\n            }, emp.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this)]\n      }, dateStr, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n}, \"k5R9xtrjH0o4RS1gOhBLUh82zH8=\")), \"k5R9xtrjH0o4RS1gOhBLUh82zH8=\");\n_c3 = SchedulerApp;\nexport default SchedulerApp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EmployeeRow\");\n$RefreshReg$(_c2, \"SchedulerApp$forwardRef\");\n$RefreshReg$(_c3, \"SchedulerApp\");","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useMemo","useEffect","jsxDEV","_jsxDEV","TIME_SLOTS","i","push","String","padStart","timeToMinutes","time","hours","minutes","split","map","Number","getWeekDates","start","week","d","Date","setMinutes","getMinutes","getTimezoneOffset","setDate","getDate","getDay","generateDailySchedule","employees","date","schedule","Map","forEach","emp","set","name","dayOfWeek","dateStr","toISOString","dailyTasks","get","hasPTO","Array","isArray","ptoDates","includes","shiftStartMinutes","shift","shiftEndMinutes","end","lunchStartMinutes","lunch","lunchEndMinutes","slot","slotMinutes","dispatchCount","reservationsCount","availableEmployees","filter","_schedule$get","abilities","_schedule$get2","specialistTask","EmployeeRow","dailySchedule","cells","length","_dailySchedule$get","currentTask","colspan","_dailySchedule$get2","colSpan","className","toLowerCase","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","SchedulerApp","_s","_c2","initialEmployees","weekStart","ref","setEmployees","weekDates","parsed","startISO","endISO","fetch","then","res","ok","json","Promise","reject","statusText","ptoMap","currentEmployees","catch","err","console","error","weeklySchedule","fullSchedule","weekdays","toLocaleDateString","weekday","month","day","_c3","$RefreshReg$"],"sources":["/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js"],"sourcesContent":["// src/SchedulerApp.js\nimport React, {\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useEffect,\n} from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\n\nconst timeToMinutes = (time) => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\n\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n  const schedule = new Map();\n  employees.forEach(emp => schedule.set(emp.name, new Map()));\n\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n  \n  const dateStr = date.toISOString().split('T')[0];\n\n  // Step 1: Initialize schedule with OFF, PTO, and Lunch\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n    \n    const shiftStartMinutes = timeToMinutes(emp.shift.start);\n    const shiftEndMinutes = timeToMinutes(emp.shift.end);\n    const lunchStartMinutes = timeToMinutes(emp.lunch.start);\n    const lunchEndMinutes = timeToMinutes(emp.lunch.end);\n\n    TIME_SLOTS.forEach(slot => {\n      if (hasPTO) {\n        dailyTasks.set(slot, 'PTO');\n        return;\n      }\n      \n      const slotMinutes = timeToMinutes(slot);\n      if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n        if (emp.lunch.start && slotMinutes >= lunchStartMinutes && slotMinutes < lunchEndMinutes) {\n          dailyTasks.set(slot, 'Lunch');\n        } else {\n          dailyTasks.set(slot, 'Available'); // Mark as available for now\n        }\n      } else {\n        dailyTasks.set(slot, 'OFF');\n      }\n    });\n  });\n\n  // Step 2: Fill mandatory coverage slots (Reservations & Dispatch)\n  TIME_SLOTS.forEach(slot => {\n    const slotMinutes = timeToMinutes(slot);\n    if (slotMinutes < 480 || slotMinutes >= 1020) {\n      return; \n    }\n\n    let dispatchCount = 0;\n    let reservationsCount = 0;\n    \n    const availableEmployees = employees.filter(emp => schedule.get(emp.name)?.get(slot) === 'Available');\n\n    for (const emp of availableEmployees) {\n      if (dispatchCount < 1 && emp.abilities.includes('Dispatch')) {\n        schedule.get(emp.name).set(slot, 'Dispatch');\n        dispatchCount++;\n      }\n    }\n    \n    for (const emp of availableEmployees) {\n      if (schedule.get(emp.name)?.get(slot) === 'Available') {\n        if (reservationsCount < 3 && emp.abilities.includes('Reservations')) {\n          schedule.get(emp.name).set(slot, 'Reservations');\n          reservationsCount++;\n        }\n      }\n    }\n  });\n\n  // Step 3: Fill remaining 'Available' slots with specialist tasks\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    TIME_SLOTS.forEach(slot => {\n      if (dailyTasks.get(slot) === 'Available') {\n        dailyTasks.set(slot, emp.specialistTask);\n      }\n    });\n  });\n\n\n  return schedule;\n}\n\n// --- UI Components ---\nconst EmployeeRow = ({ emp, dailySchedule }) => {\n    const cells = [];\n    let i = 0;\n    while (i < TIME_SLOTS.length) {\n        const currentTask = dailySchedule.get(emp.name)?.get(TIME_SLOTS[i]) || 'OFF';\n        let colspan = 1;\n        while (i + colspan < TIME_SLOTS.length && (dailySchedule.get(emp.name)?.get(TIME_SLOTS[i + colspan]) || 'OFF') === currentTask) {\n            colspan++;\n        }\n\n        if (currentTask !== 'OFF') {\n            cells.push(\n                <td \n                    key={`${emp.name}-${TIME_SLOTS[i]}`} \n                    colSpan={colspan} \n                    className={`task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`}\n                >\n                    {currentTask}\n                </td>\n            );\n        } else {\n             cells.push(<td key={`${emp.name}-${TIME_SLOTS[i]}`} colSpan={colspan}></td>);\n        }\n        i += colspan;\n    }\n\n    return (\n        <tr>\n            <td>{emp.name}</td>\n            {cells}\n        </tr>\n    );\n};\n\nconst SchedulerApp = forwardRef(function SchedulerApp(\n  { initialEmployees = [], weekStart },\n  ref\n) {\n  const [employees, setEmployees] = useState(initialEmployees);\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  \n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 6);\n    const endISO = end.toISOString();\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`)\n      .then((res) => res.ok ? res.json() : Promise.reject(res.statusText))\n      .then(({ ptoMap }) => {\n         // **FIX:** Use the functional update form of setState\n         // This ensures we are updating the CURRENT state, not overwriting it.\n         setEmployees(currentEmployees =>\n          currentEmployees.map(emp => ({\n            ...emp,\n            ptoDates: Array.isArray(ptoMap[emp.name]) ? ptoMap[emp.name] : emp.ptoDates || [],\n          }))\n        );\n      })\n      .catch((err) => console.error('Fetch PTO failed:', err));\n  }, [weekStart]);\n\n  // This effect ensures that if the initialEmployees prop changes, the internal state resets.\n  useEffect(() => {\n    setEmployees(initialEmployees);\n  }, [initialEmployees]);\n\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n        if (date.getDay() >= 1 && date.getDay() <= 5) {\n            fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n        }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n\n  useImperativeHandle(ref, () => ({\n    // ...\n  }));\n  \n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n\n  return (\n    <div className=\"scheduler-container\">\n      {weekdays.map(date => {\n        const dateStr = date.toISOString().split('T')[0];\n        const dailySchedule = weeklySchedule.get(dateStr);\n        if (!dailySchedule) return null;\n\n        return (\n          <div key={dateStr} className=\"day-schedule\">\n            <h3>{date.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}</h3>\n            <table className=\"schedule-table\">\n              <thead>\n                <tr>\n                  <th>Employee</th>\n                  {TIME_SLOTS.map(slot => <th key={slot} className=\"time-slot-header\">{slot}</th>)}\n                </tr>\n              </thead>\n              <tbody>\n                {employees.map(emp => (\n                  <EmployeeRow key={emp.name} emp={emp} dailySchedule={dailySchedule} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )\n      })}\n    </div>\n  );\n});\n\nexport default SchedulerApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}