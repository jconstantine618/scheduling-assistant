{"ast":null,"code":"var _jsxFileName = \"/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js\",\n  _s = $RefreshSig$();\n// src/SchedulerApp.js\nimport React, { useState, forwardRef, useImperativeHandle, useMemo, useEffect } from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\nconst timeToMinutes = time => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n  const schedule = new Map();\n  employees.forEach(emp => schedule.set(emp.name, new Map()));\n  const dayOfWeek = date.getDay();\n  if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n  const dateStr = date.toISOString().split('T')[0];\n\n  // Step 1: Initialize schedule with OFF, PTO, and Lunch\n  employees.forEach(emp => {\n    const dailyTasks = schedule.get(emp.name);\n    const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n    const shiftStartMinutes = timeToMinutes(emp.shift.start);\n    const shiftEndMinutes = timeToMinutes(emp.shift.end);\n    TIME_SLOTS.forEach(slot => {\n      if (hasPTO) {\n        dailyTasks.set(slot, 'PTO');\n        return;\n      }\n      const slotMinutes = timeToMinutes(slot);\n      if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n        dailyTasks.set(slot, 'Available');\n      } else {\n        dailyTasks.set(slot, 'OFF');\n      }\n    });\n  });\n\n  // Step 2: Intelligent Lunch Assignment\n  const lunchWindows = [{\n    start: '11:00',\n    end: '12:30'\n  }, {\n    start: '12:00',\n    end: '13:30'\n  }, {\n    start: '12:30',\n    end: '14:00'\n  }];\n  const renoLunch = {\n    start: '15:00',\n    end: '16:00'\n  };\n  employees.forEach(emp => {\n    var _schedule$get;\n    if (((_schedule$get = schedule.get(emp.name)) === null || _schedule$get === void 0 ? void 0 : _schedule$get.get(TIME_SLOTS[0])) === 'PTO') return;\n    const empLunchWindows = emp.name === 'Katy' ? [renoLunch] : lunchWindows;\n    let bestLunchWindow = null;\n    let bestScore = -Infinity;\n\n    // Find the best possible lunch window for this employee\n    for (const window of empLunchWindows) {\n      const lunchStartMinutes = timeToMinutes(window.start);\n      const lunchEndMinutes = timeToMinutes(window.end);\n      let isWindowViable = true;\n      let windowScore = 0;\n\n      // Check if the window is within the employee's available time\n      for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n        var _schedule$get2;\n        const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n        if (!slot || ((_schedule$get2 = schedule.get(emp.name)) === null || _schedule$get2 === void 0 ? void 0 : _schedule$get2.get(slot)) !== 'Available') {\n          isWindowViable = false;\n          break;\n        }\n      }\n      if (!isWindowViable) continue;\n\n      // Calculate the impact on coverage if this lunch is taken\n      for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n        const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n        const availableForSlot = employees.filter(e => {\n          const task = schedule.get(e.name).get(slot);\n          return e.name !== emp.name && task === 'Available';\n        });\n        const resCoverage = availableForSlot.filter(e => e.abilities.includes('Reservations')).length;\n        const dispCoverage = availableForSlot.filter(e => e.abilities.includes('Dispatch')).length;\n\n        // Penalize heavily for dropping below minimums\n        if (resCoverage < 3 || dispCoverage < 1) {\n          windowScore -= 100;\n        } else {\n          windowScore += resCoverage + dispCoverage;\n        }\n      }\n      if (windowScore > bestScore) {\n        bestScore = windowScore;\n        bestLunchWindow = window;\n      }\n    }\n\n    // Assign the best found lunch window\n    if (bestLunchWindow) {\n      const start = timeToMinutes(bestLunchWindow.start);\n      const end = timeToMinutes(bestLunchWindow.end);\n      for (let min = start; min < end; min += 30) {\n        const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n        if (slot) schedule.get(emp.name).set(slot, 'Lunch');\n      }\n    }\n  });\n\n  // Step 3: Fill mandatory coverage slots\n  TIME_SLOTS.forEach(slot => {\n    const slotMinutes = timeToMinutes(slot);\n    let neededReservations = slotMinutes >= 480 && slotMinutes < 1020 ? 3 : slotMinutes >= 1020 ? 2 : 0;\n    let neededDispatch = slotMinutes >= 480 ? 1 : 0;\n    if (neededDispatch === 0 && neededReservations === 0) return;\n    const availableForSlot = employees.filter(e => schedule.get(e.name).get(slot) === 'Available');\n\n    // Assign Dispatch\n    let assignedDispatch = 0;\n    for (const emp of availableForSlot) {\n      if (assignedDispatch < neededDispatch && emp.abilities.includes('Dispatch')) {\n        schedule.get(emp.name).set(slot, 'Dispatch');\n        assignedDispatch++;\n      }\n    }\n\n    // Assign Reservations\n    let assignedReservations = 0;\n    for (const emp of availableForSlot) {\n      if (schedule.get(emp.name).get(slot) === 'Available' && assignedReservations < neededReservations && emp.abilities.includes('Reservations')) {\n        schedule.get(emp.name).set(slot, 'Reservations');\n        assignedReservations++;\n      }\n    }\n  });\n\n  // Step 4: Fill remaining 'Available' slots with specialist tasks\n  employees.forEach(emp => {\n    TIME_SLOTS.forEach(slot => {\n      if (schedule.get(emp.name).get(slot) === 'Available') {\n        schedule.get(emp.name).set(slot, emp.specialistTask);\n      }\n    });\n  });\n  return schedule;\n}\n\n// --- UI Components ---\nconst EmployeeRow = ({\n  emp,\n  dailySchedule\n}) => {\n  const cells = [];\n  let i = 0;\n  while (i < TIME_SLOTS.length) {\n    var _dailySchedule$get;\n    const currentTask = ((_dailySchedule$get = dailySchedule.get(emp.name)) === null || _dailySchedule$get === void 0 ? void 0 : _dailySchedule$get.get(TIME_SLOTS[i])) || 'OFF';\n    let colspan = 1;\n    while (i + colspan < TIME_SLOTS.length && (((_dailySchedule$get2 = dailySchedule.get(emp.name)) === null || _dailySchedule$get2 === void 0 ? void 0 : _dailySchedule$get2.get(TIME_SLOTS[i + colspan])) || 'OFF') === currentTask) {\n      var _dailySchedule$get2;\n      colspan++;\n    }\n    if (currentTask !== 'OFF' && currentTask !== 'Available') {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan,\n        className: `task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`,\n        children: currentTask\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this));\n    } else {\n      cells.push(/*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: colspan\n      }, `${emp.name}-${TIME_SLOTS[i]}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 25\n      }, this));\n    }\n    i += colspan;\n  }\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: emp.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), cells]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 9\n  }, this);\n};\n_c = EmployeeRow;\nconst SchedulerApp = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c2 = _s(function SchedulerApp({\n  initialEmployees = [],\n  weekStart\n}, ref) {\n  _s();\n  const [ptoMap, setPtoMap] = useState({});\n  const [manualPto, setManualPto] = useState({});\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 7);\n    const endISO = end.toISOString();\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`).then(res => res.ok ? res.json() : Promise.reject(res.statusText)).then(data => setPtoMap(data.ptoMap || {})).catch(err => {\n      console.error('Fetch PTO failed:', err);\n      setPtoMap({});\n    });\n  }, [weekStart]);\n  const employees = useMemo(() => {\n    return initialEmployees.map(emp => {\n      const calendarDates = ptoMap[emp.name] || [];\n      const manualDates = manualPto[emp.name] || [];\n      return {\n        ...emp,\n        ptoDates: [...new Set([...calendarDates, ...manualDates])]\n      };\n    });\n  }, [initialEmployees, ptoMap, manualPto]);\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n      if (date.getDay() >= 1 && date.getDay() <= 5) {\n        fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n      }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(newPtoMap) {\n      setManualPto(currentManualPto => {\n        const updated = {\n          ...currentManualPto\n        };\n        for (const name in newPtoMap) {\n          updated[name] = [...new Set([...(updated[name] || []), ...newPtoMap[name]])];\n        }\n        return updated;\n      });\n    },\n    clearOverrides() {\n      setManualPto({});\n    }\n  }));\n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scheduler-container\",\n    children: weekdays.map(date => {\n      const dateStr = date.toISOString().split('T')[0];\n      const dailySchedule = weeklySchedule.get(dateStr);\n      if (!dailySchedule) return null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-schedule\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: date.toLocaleDateString('en-US', {\n            weekday: 'long',\n            month: 'short',\n            day: 'numeric'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"schedule-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Employee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 19\n              }, this), TIME_SLOTS.map(slot => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: `time-slot-header ${slot.endsWith(':30') ? 'half-hour' : 'full-hour'}`,\n                children: slot.endsWith(':00') ? slot.replace(':', '') : ''\n              }, slot, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: employees.map(emp => /*#__PURE__*/_jsxDEV(EmployeeRow, {\n              emp: emp,\n              dailySchedule: dailySchedule\n            }, emp.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, dateStr, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}, \"XTWBwG2bYGvPfCleuohTAM5kqbE=\")), \"XTWBwG2bYGvPfCleuohTAM5kqbE=\");\n_c3 = SchedulerApp;\nexport default SchedulerApp;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EmployeeRow\");\n$RefreshReg$(_c2, \"SchedulerApp$forwardRef\");\n$RefreshReg$(_c3, \"SchedulerApp\");","map":{"version":3,"names":["React","useState","forwardRef","useImperativeHandle","useMemo","useEffect","jsxDEV","_jsxDEV","TIME_SLOTS","i","push","String","padStart","timeToMinutes","time","hours","minutes","split","map","Number","getWeekDates","start","week","d","Date","setMinutes","getMinutes","getTimezoneOffset","setDate","getDate","getDay","generateDailySchedule","employees","date","schedule","Map","forEach","emp","set","name","dayOfWeek","dateStr","toISOString","dailyTasks","get","hasPTO","Array","isArray","ptoDates","includes","shiftStartMinutes","shift","shiftEndMinutes","end","slot","slotMinutes","lunchWindows","renoLunch","_schedule$get","empLunchWindows","bestLunchWindow","bestScore","Infinity","window","lunchStartMinutes","lunchEndMinutes","isWindowViable","windowScore","min","_schedule$get2","find","s","availableForSlot","filter","e","task","resCoverage","abilities","length","dispCoverage","neededReservations","neededDispatch","assignedDispatch","assignedReservations","specialistTask","EmployeeRow","dailySchedule","cells","_dailySchedule$get","currentTask","colspan","_dailySchedule$get2","colSpan","className","toLowerCase","replace","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","SchedulerApp","_s","_c2","initialEmployees","weekStart","ref","ptoMap","setPtoMap","manualPto","setManualPto","weekDates","parsed","startISO","endISO","fetch","then","res","ok","json","Promise","reject","statusText","data","catch","err","console","error","calendarDates","manualDates","Set","weeklySchedule","fullSchedule","updateEmployeePTOs","newPtoMap","currentManualPto","updated","clearOverrides","weekdays","toLocaleDateString","weekday","month","day","endsWith","_c3","$RefreshReg$"],"sources":["/Users/johnconstantine/scheduling-assistant/src/SchedulerApp.js"],"sourcesContent":["// src/SchedulerApp.js\nimport React, {\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useMemo,\n  useEffect,\n} from 'react';\nimport './App.css';\n\n// --- Time and Date Utilities ---\nconst TIME_SLOTS = [];\nfor (let i = 7; i < 22; i++) {\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:00`);\n  TIME_SLOTS.push(`${String(i).padStart(2, '0')}:30`);\n}\n\nconst timeToMinutes = (time) => {\n  if (!time) return 0;\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n};\n\nfunction getWeekDates(start) {\n  const week = [];\n  const d = new Date(start);\n  d.setMinutes(d.getMinutes() + d.getTimezoneOffset());\n  d.setDate(d.getDate() - d.getDay());\n  for (let i = 0; i < 7; i++) {\n    week.push(new Date(d));\n    d.setDate(d.getDate() + 1);\n  }\n  return week;\n}\n\n// --- Core Scheduling Algorithm ---\nfunction generateDailySchedule(employees, date) {\n    const schedule = new Map();\n    employees.forEach(emp => schedule.set(emp.name, new Map()));\n\n    const dayOfWeek = date.getDay();\n    if (dayOfWeek === 0 || dayOfWeek === 6) return schedule;\n\n    const dateStr = date.toISOString().split('T')[0];\n\n    // Step 1: Initialize schedule with OFF, PTO, and Lunch\n    employees.forEach(emp => {\n        const dailyTasks = schedule.get(emp.name);\n        const hasPTO = Array.isArray(emp.ptoDates) && emp.ptoDates.includes(dateStr);\n        const shiftStartMinutes = timeToMinutes(emp.shift.start);\n        const shiftEndMinutes = timeToMinutes(emp.shift.end);\n\n        TIME_SLOTS.forEach(slot => {\n            if (hasPTO) {\n                dailyTasks.set(slot, 'PTO');\n                return;\n            }\n            const slotMinutes = timeToMinutes(slot);\n            if (slotMinutes >= shiftStartMinutes && slotMinutes < shiftEndMinutes) {\n                dailyTasks.set(slot, 'Available');\n            } else {\n                dailyTasks.set(slot, 'OFF');\n            }\n        });\n    });\n\n    // Step 2: Intelligent Lunch Assignment\n    const lunchWindows = [\n        { start: '11:00', end: '12:30' },\n        { start: '12:00', end: '13:30' },\n        { start: '12:30', end: '14:00' },\n    ];\n    const renoLunch = { start: '15:00', end: '16:00' };\n\n    employees.forEach(emp => {\n        if (schedule.get(emp.name)?.get(TIME_SLOTS[0]) === 'PTO') return;\n\n        const empLunchWindows = emp.name === 'Katy' ? [renoLunch] : lunchWindows;\n        let bestLunchWindow = null;\n        let bestScore = -Infinity;\n\n        // Find the best possible lunch window for this employee\n        for (const window of empLunchWindows) {\n            const lunchStartMinutes = timeToMinutes(window.start);\n            const lunchEndMinutes = timeToMinutes(window.end);\n            let isWindowViable = true;\n            let windowScore = 0;\n\n            // Check if the window is within the employee's available time\n            for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n                const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n                if (!slot || schedule.get(emp.name)?.get(slot) !== 'Available') {\n                    isWindowViable = false;\n                    break;\n                }\n            }\n            if (!isWindowViable) continue;\n\n            // Calculate the impact on coverage if this lunch is taken\n            for (let min = lunchStartMinutes; min < lunchEndMinutes; min += 30) {\n                const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n                const availableForSlot = employees.filter(e => {\n                    const task = schedule.get(e.name).get(slot);\n                    return e.name !== emp.name && task === 'Available';\n                });\n                const resCoverage = availableForSlot.filter(e => e.abilities.includes('Reservations')).length;\n                const dispCoverage = availableForSlot.filter(e => e.abilities.includes('Dispatch')).length;\n\n                // Penalize heavily for dropping below minimums\n                if (resCoverage < 3 || dispCoverage < 1) {\n                    windowScore -= 100; \n                } else {\n                    windowScore += resCoverage + dispCoverage;\n                }\n            }\n\n            if (windowScore > bestScore) {\n                bestScore = windowScore;\n                bestLunchWindow = window;\n            }\n        }\n\n        // Assign the best found lunch window\n        if (bestLunchWindow) {\n            const start = timeToMinutes(bestLunchWindow.start);\n            const end = timeToMinutes(bestLunchWindow.end);\n            for (let min = start; min < end; min += 30) {\n                const slot = TIME_SLOTS.find(s => timeToMinutes(s) === min);\n                if(slot) schedule.get(emp.name).set(slot, 'Lunch');\n            }\n        }\n    });\n\n    // Step 3: Fill mandatory coverage slots\n    TIME_SLOTS.forEach(slot => {\n        const slotMinutes = timeToMinutes(slot);\n        let neededReservations = (slotMinutes >= 480 && slotMinutes < 1020) ? 3 : (slotMinutes >= 1020 ? 2 : 0);\n        let neededDispatch = (slotMinutes >= 480) ? 1 : 0;\n\n        if (neededDispatch === 0 && neededReservations === 0) return;\n\n        const availableForSlot = employees.filter(e => schedule.get(e.name).get(slot) === 'Available');\n        \n        // Assign Dispatch\n        let assignedDispatch = 0;\n        for(const emp of availableForSlot) {\n            if (assignedDispatch < neededDispatch && emp.abilities.includes('Dispatch')) {\n                schedule.get(emp.name).set(slot, 'Dispatch');\n                assignedDispatch++;\n            }\n        }\n\n        // Assign Reservations\n        let assignedReservations = 0;\n        for(const emp of availableForSlot) {\n            if (schedule.get(emp.name).get(slot) === 'Available' && assignedReservations < neededReservations && emp.abilities.includes('Reservations')) {\n                schedule.get(emp.name).set(slot, 'Reservations');\n                assignedReservations++;\n            }\n        }\n    });\n\n    // Step 4: Fill remaining 'Available' slots with specialist tasks\n    employees.forEach(emp => {\n        TIME_SLOTS.forEach(slot => {\n            if (schedule.get(emp.name).get(slot) === 'Available') {\n                schedule.get(emp.name).set(slot, emp.specialistTask);\n            }\n        });\n    });\n\n    return schedule;\n}\n\n\n// --- UI Components ---\nconst EmployeeRow = ({ emp, dailySchedule }) => {\n    const cells = [];\n    let i = 0;\n    while (i < TIME_SLOTS.length) {\n        const currentTask = dailySchedule.get(emp.name)?.get(TIME_SLOTS[i]) || 'OFF';\n        let colspan = 1;\n        while (i + colspan < TIME_SLOTS.length && (dailySchedule.get(emp.name)?.get(TIME_SLOTS[i + colspan]) || 'OFF') === currentTask) {\n            colspan++;\n        }\n\n        if (currentTask !== 'OFF' && currentTask !== 'Available') {\n            cells.push(\n                <td \n                    key={`${emp.name}-${TIME_SLOTS[i]}`} \n                    colSpan={colspan} \n                    className={`task-cell task-${currentTask.toLowerCase().replace(/[^a-z]/g, '')}`}\n                >\n                    {currentTask}\n                </td>\n            );\n        } else {\n             cells.push(<td key={`${emp.name}-${TIME_SLOTS[i]}`} colSpan={colspan}></td>);\n        }\n        i += colspan;\n    }\n\n    return (\n        <tr>\n            <td>{emp.name}</td>\n            {cells}\n        </tr>\n    );\n};\n\nconst SchedulerApp = forwardRef(function SchedulerApp(\n  { initialEmployees = [], weekStart },\n  ref\n) {\n  const [ptoMap, setPtoMap] = useState({});\n  const [manualPto, setManualPto] = useState({});\n  const weekDates = useMemo(() => getWeekDates(weekStart || new Date()), [weekStart]);\n  \n  useEffect(() => {\n    if (!weekStart) return;\n    const parsed = new Date(weekStart);\n    parsed.setMinutes(parsed.getMinutes() + parsed.getTimezoneOffset());\n    const startISO = parsed.toISOString();\n    const end = new Date(parsed);\n    end.setDate(end.getDate() + 7);\n    const endISO = end.toISOString();\n\n    fetch(`/api/pto-calendar?start=${startISO}&end=${endISO}`)\n      .then(res => res.ok ? res.json() : Promise.reject(res.statusText))\n      .then(data => setPtoMap(data.ptoMap || {}))\n      .catch(err => {\n        console.error('Fetch PTO failed:', err);\n        setPtoMap({});\n      });\n  }, [weekStart]);\n\n  const employees = useMemo(() => {\n    return initialEmployees.map(emp => {\n        const calendarDates = ptoMap[emp.name] || [];\n        const manualDates = manualPto[emp.name] || [];\n        return {\n            ...emp,\n            ptoDates: [...new Set([...calendarDates, ...manualDates])],\n        };\n    });\n  }, [initialEmployees, ptoMap, manualPto]);\n\n\n  const weeklySchedule = useMemo(() => {\n    const fullSchedule = new Map();\n    weekDates.forEach(date => {\n        if (date.getDay() >= 1 && date.getDay() <= 5) {\n            fullSchedule.set(date.toISOString().split('T')[0], generateDailySchedule(employees, date));\n        }\n    });\n    return fullSchedule;\n  }, [employees, weekDates]);\n\n  useImperativeHandle(ref, () => ({\n    updateEmployeePTOs(newPtoMap) {\n        setManualPto(currentManualPto => {\n            const updated = { ...currentManualPto };\n            for (const name in newPtoMap) {\n                updated[name] = [...new Set([...(updated[name] || []), ...newPtoMap[name]])];\n            }\n            return updated;\n        });\n    },\n    clearOverrides() {\n        setManualPto({});\n    }\n  }));\n  \n  const weekdays = weekDates.filter(d => d.getDay() >= 1 && d.getDay() <= 5);\n\n  return (\n    <div className=\"scheduler-container\">\n      {weekdays.map(date => {\n        const dateStr = date.toISOString().split('T')[0];\n        const dailySchedule = weeklySchedule.get(dateStr);\n        if (!dailySchedule) return null;\n\n        return (\n          <div key={dateStr} className=\"day-schedule\">\n            <h3>{date.toLocaleDateString('en-US', { weekday: 'long', month: 'short', day: 'numeric' })}</h3>\n            <table className=\"schedule-table\">\n              <thead>\n                <tr>\n                  <th>Employee</th>\n                  {TIME_SLOTS.map(slot => (\n                    <th key={slot} className={`time-slot-header ${slot.endsWith(':30') ? 'half-hour' : 'full-hour'}`}>\n                      {slot.endsWith(':00') ? slot.replace(':', '') : ''}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {employees.map(emp => (\n                  <EmployeeRow key={emp.name} emp={emp} dailySchedule={dailySchedule} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )\n      })}\n    </div>\n  );\n});\n\nexport default SchedulerApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}